/*
 * SuperMQ Combined Service
 *
 * This is the SuperMQ Combined Service based on the OpenAPI 3.0 specification.  It is the HTTP API for managing SuperMQ. You can now help us improve the API whether it's by making changes to the definition itself or to the code. Some useful links: - [The SuperMQ repository](https://github.com/absmach/supermq) 
 *
 * The version of the OpenAPI document: 0.15.1
 * Contact: info@abstractmachines.fr
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SendInvitationReqObj {
    /// User unique identifier.
    #[serde(rename = "user_id")]
    pub user_id: uuid::Uuid,
    /// Domain unique identifier.
    #[serde(rename = "domain_id")]
    pub domain_id: uuid::Uuid,
    /// Relation between user and domain.
    #[serde(rename = "relation")]
    pub relation: Relation,
    /// Resend invitation.
    #[serde(rename = "resend", skip_serializing_if = "Option::is_none")]
    pub resend: Option<bool>,
}

impl SendInvitationReqObj {
    pub fn new(user_id: uuid::Uuid, domain_id: uuid::Uuid, relation: Relation) -> SendInvitationReqObj {
        SendInvitationReqObj {
            user_id,
            domain_id,
            relation,
            resend: None,
        }
    }
}

/// Relation between user and domain.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Relation {
    #[serde(rename = "administrator")]
    Administrator,
    #[serde(rename = "editor")]
    Editor,
    #[serde(rename = "contributor")]
    Contributor,
    #[serde(rename = "member")]
    Member,
    #[serde(rename = "guest")]
    Guest,
    #[serde(rename = "domain")]
    Domain,
    #[serde(rename = "parent_group")]
    ParentGroup,
    #[serde(rename = "role_group")]
    RoleGroup,
    #[serde(rename = "group")]
    Group,
    #[serde(rename = "platform")]
    Platform,
}

impl Default for Relation {
    fn default() -> Relation {
        Self::Administrator
    }
}

