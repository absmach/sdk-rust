/*
 * SuperMQ Combined Service
 *
 * This is the SuperMQ Combined Service based on the OpenAPI 3.0 specification.  It is the HTTP API for managing SuperMQ. You can now help us improve the API whether it's by making changes to the definition itself or to the code. Some useful links: - [The SuperMQ repository](https://github.com/absmach/supermq) 
 *
 * The version of the OpenAPI document: 0.15.1
 * Contact: info@abstractmachines.fr
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Cert {
    /// Corresponding SuperMQ Client ID.
    #[serde(rename = "client_id", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<uuid::Uuid>,
    /// Client Certificate.
    #[serde(rename = "client_cert", skip_serializing_if = "Option::is_none")]
    pub client_cert: Option<String>,
    /// Key for the client_cert.
    #[serde(rename = "client_key", skip_serializing_if = "Option::is_none")]
    pub client_key: Option<String>,
    /// CA Certificate that is used to issue client certs, usually intermediate.
    #[serde(rename = "issuing_ca", skip_serializing_if = "Option::is_none")]
    pub issuing_ca: Option<String>,
    /// Certificate serial
    #[serde(rename = "serial", skip_serializing_if = "Option::is_none")]
    pub serial: Option<String>,
    /// Certificate expiry date
    #[serde(rename = "expire", skip_serializing_if = "Option::is_none")]
    pub expire: Option<String>,
}

impl Cert {
    pub fn new() -> Cert {
        Cert {
            client_id: None,
            client_cert: None,
            client_key: None,
            issuing_ca: None,
            serial: None,
            expire: None,
        }
    }
}


