/*
 * SuperMQ Combined Service
 *
 * This is the SuperMQ Combined Service based on the OpenAPI 3.0 specification.  It is the HTTP API for managing SuperMQ. You can now help us improve the API whether it's by making changes to the definition itself or to the code. Some useful links: - [The SuperMQ repository](https://github.com/absmach/supermq) 
 *
 * The version of the OpenAPI document: 0.15.1
 * Contact: info@abstractmachines.fr
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MessagesPage {
    /// Total number of items that are present on the system.
    #[serde(rename = "total", skip_serializing_if = "Option::is_none")]
    pub total: Option<f32>,
    /// Number of items that were skipped during retrieval.
    #[serde(rename = "offset", skip_serializing_if = "Option::is_none")]
    pub offset: Option<f32>,
    /// Size of the subset that was retrieved.
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<f32>,
    #[serde(rename = "messages", skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<crate::models::MessagesPageMessagesInner>>,
}

impl MessagesPage {
    pub fn new() -> MessagesPage {
        MessagesPage {
            total: None,
            offset: None,
            limit: None,
            messages: None,
        }
    }
}


