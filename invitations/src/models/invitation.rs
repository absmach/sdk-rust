/*
 * SuperMQ Invitations Service
 *
 * This is the Invitations Server based on the OpenAPI 3.0 specification.  It is the HTTP API for managing platform invitations. You can now help us improve the API whether it's by making changes to the definition itself or to the code. Some useful links: - [The SuperMQ repository](https://github.com/absmach/supermq) 
 *
 * The version of the OpenAPI document: 0.15.1
 * Contact: info@abstractmachines.fr
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Invitation {
    /// User unique identifier.
    #[serde(rename = "invited_by", skip_serializing_if = "Option::is_none")]
    pub invited_by: Option<uuid::Uuid>,
    /// User unique identifier.
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<uuid::Uuid>,
    /// Domain unique identifier.
    #[serde(rename = "domain_id", skip_serializing_if = "Option::is_none")]
    pub domain_id: Option<uuid::Uuid>,
    /// Relation between user and domain.
    #[serde(rename = "relation", skip_serializing_if = "Option::is_none")]
    pub relation: Option<Relation>,
    /// Time when the group was created.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Time when the group was created.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// Time when the group was created.
    #[serde(rename = "confirmed_at", skip_serializing_if = "Option::is_none")]
    pub confirmed_at: Option<String>,
}

impl Invitation {
    pub fn new() -> Invitation {
        Invitation {
            invited_by: None,
            user_id: None,
            domain_id: None,
            relation: None,
            created_at: None,
            updated_at: None,
            confirmed_at: None,
        }
    }
}
/// Relation between user and domain.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Relation {
    #[serde(rename = "administrator")]
    Administrator,
    #[serde(rename = "editor")]
    Editor,
    #[serde(rename = "contributor")]
    Contributor,
    #[serde(rename = "member")]
    Member,
    #[serde(rename = "guest")]
    Guest,
    #[serde(rename = "domain")]
    Domain,
    #[serde(rename = "parent_group")]
    ParentGroup,
    #[serde(rename = "role_group")]
    RoleGroup,
    #[serde(rename = "group")]
    Group,
    #[serde(rename = "platform")]
    Platform,
}

impl Default for Relation {
    fn default() -> Relation {
        Self::Administrator
    }
}

