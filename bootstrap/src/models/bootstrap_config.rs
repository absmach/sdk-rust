/*
 * SuperMQ Bootstrap service
 *
 * HTTP API for managing platform clients configuration. Some useful links: - [The SuperMQ repository](https://github.com/absmach/supermq) 
 *
 * The version of the OpenAPI document: 0.15.1
 * Contact: info@abstractmachines.fr
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BootstrapConfig {
    /// Corresponding SuperMQ Client ID.
    #[serde(rename = "client_id")]
    pub client_id: uuid::Uuid,
    /// Corresponding SuperMQ Client key.
    #[serde(rename = "client_key")]
    pub client_key: uuid::Uuid,
    #[serde(rename = "channels")]
    pub channels: Vec<String>,
    /// Free-form custom configuration.
    #[serde(rename = "content")]
    pub content: String,
    /// Client certificate.
    #[serde(rename = "client_cert", skip_serializing_if = "Option::is_none")]
    pub client_cert: Option<String>,
}

impl BootstrapConfig {
    pub fn new(client_id: uuid::Uuid, client_key: uuid::Uuid, channels: Vec<String>, content: String) -> BootstrapConfig {
        BootstrapConfig {
            client_id,
            client_key,
            channels,
            content,
            client_cert: None,
        }
    }
}

