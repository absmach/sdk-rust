/*
 * SuperMQ Bootstrap service
 *
 * HTTP API for managing platform clients configuration. Some useful links: - [The SuperMQ repository](https://github.com/absmach/supermq) 
 *
 * The version of the OpenAPI document: 0.15.1
 * Contact: info@abstractmachines.fr
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Config {
    /// Corresponding SuperMQ Client ID.
    #[serde(rename = "client_id", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<uuid::Uuid>,
    /// Corresponding SuperMQ Client key.
    #[serde(rename = "magistrala_secret", skip_serializing_if = "Option::is_none")]
    pub magistrala_secret: Option<uuid::Uuid>,
    #[serde(rename = "channels", skip_serializing_if = "Option::is_none")]
    pub channels: Option<Vec<models::ConfigChannelsInner>>,
    /// External ID (MAC address or some unique identifier).
    #[serde(rename = "external_id")]
    pub external_id: String,
    /// External key.
    #[serde(rename = "external_key")]
    pub external_key: String,
    /// Free-form custom configuration.
    #[serde(rename = "content", skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<models::State>,
    /// Client certificate.
    #[serde(rename = "client_cert", skip_serializing_if = "Option::is_none")]
    pub client_cert: Option<String>,
    /// Issuing CA certificate.
    #[serde(rename = "ca_cert", skip_serializing_if = "Option::is_none")]
    pub ca_cert: Option<String>,
}

impl Config {
    pub fn new(external_id: String, external_key: String) -> Config {
        Config {
            client_id: None,
            magistrala_secret: None,
            channels: None,
            external_id,
            external_key,
            content: None,
            state: None,
            client_cert: None,
            ca_cert: None,
        }
    }
}

